%% -*- erlang -*-

%% @doc hanoidb data_root
{mapping, "hanoidb.data_root", "hanoidb.data_root",
 [{default, "{{platform_data_dir}}/hanoidb"}]}.

%% @doc By default, Hanoidb keeps all of your data around. If your data has
%% limited time-value, or if for space reasons you need to purge data, you can
%% set the `expiry_secs` option. If you needed to purge data automatically
%% after 1 day, set the value to `1d`.
%%
%% Default is: `0` which disables automatic expiration
{mapping, "hanoidb.expiry", "hanoidb.expiry_secs",
 [{datatype, {duration, s}},
  {level, advanced},
  {default, 0}]}.

%% @doc The merge strategy is one of `fast' or `predictable'.
%% Both have same log2(N) worst case, but `fast' is
%% sometimes faster; yielding latency fluctuations.
%%
{mapping, "hanoidb.merge_strategy", "hanoidb.merge_strategy",
 [{default, fast},
  {datatype, {enum, [fast, predictable]}},
  {level, advanced}]}.

%% @doc The `sync_strategy` setting changes the durability of writes by specifying
%%  when to synchronize data to disk. The default setting protects against data
%%  loss in the event of application failure (process death) but leaves open a
%%  small window wherein data could be lost in the event of complete system
%%  failure (e.g. hardware, O/S, power).
%%
%%  The default mode, `none`, writes data into operating system buffers which
%%  which will be written to the disks when those buffers are flushed by the
%%  operating system. If the system fails (power loss, crash, etc.) before
%%  before those buffers are flushed to stable storage that data is lost.
%%
%%  This is prevented by the setting `o_sync` which forces the operating system
%%  to flush to stable storage at every write. The effect of flushing each
%%  write is better durability, however write throughput will suffer as each
%%  write will have to wait for the write to complete.
%%
%%  ___Available Sync Strategies___
%%
%%  * `none` - (default) Lets the operating system manage syncing writes.
%%  * `sync` - syncs directly.
%%  * `interval` - Will force Hanoidb to sync every `hanoidb.sync_interval` seconds.

{mapping, "hanoidb.sync_interval", "hanoidb.sync_strategy",
 [{datatype, {duration, s}},
  {level, advanced}]}.

{translation,
 "hanoidb.sync_strategy",
 fun(Conf) ->
         Setting = cuttlefish:conf_get("hanoidb.sync_strategy", Conf),
         case Setting of
             none -> none;
             sync -> sync;
             interval ->
                 Interval = cuttlefish:conf_get("hanoidb.sync_interval", Conf, undefined),
                 {seconds, Interval};
             _Default -> none
         end
 end}.

%% @doc Enable/disable on-disk compression.
%%
{mapping, "hanoidb.compression", "hanoidb.compress",
 [{default, none},
  {datatype, {enum, [none, gzip, snappy, lz4]}},
  {level, advanced}]}.

%% @doc Read/write buffer sizes apply to merge processes.
%% A merge process has two read buffers and a write
%% buffer, and there is a merge process *per level* in
%% the database.
%%

{mapping, "hanoidb.read_buffer", "hanoidb.read_buffer_size",
 [{default, "512KB"},
  {datatype, bytesize},
  {level, advanced}]}.

{mapping, "hanoidb.write_buffer", "hanoidb.write_buffer_size",
 [{default, "512KB"},
  {datatype, bytesize},
  {level, advanced}]}.

%% @doc The page size is a minimum page size, when a page fills
%% up to beyond this size, it is written to disk.
%% Compression applies to such units of page size.
%%
{mapping, "hanoidb.block_size", "hanoidb.block_size",
 [{default, "8KB"},
  {datatype, bytesize},
  {level, advanced}]}.

